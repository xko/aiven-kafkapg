#! /usr/bin/env bash
set -e
PWD=$(dirname "$0")
. "$PWD/bin/functions.sh"

TFVARS="terraform.tfvars"
TFOPTIONS="-auto-approve"

echo Will init/update aiven cloud infrastructure, needed to run this demo..
echo
(prerequisites && login) || ( echo ..failed. ; exit 1 )


if [[ -f "$TFVARS" ]]; then
  . $TFVARS
  avn project switch $aiven_project_name
else
  aiven_project_name=$(avn project details --json | pyjson '[0]["project_name"]')
  echo -n "Will now create an access token 'automation' in your aiven account to authorize terraform. " ; ask
  aiven_api_token=$(avn user access-token create --description automation --json | pyjson "[0]['full_token']")
  echo "aiven_api_token=\"$aiven_api_token\"" > $TFVARS
  echo "aiven_project_name=\"$aiven_project_name\"" >> $TFVARS
  echo " ...token and project are written to $TFVARS"
  echo
fi

echo "Will now initialize terraform and apply aiven.tf in project $aiven_project_name"
echo -n "WARNING!! Terraform will destroy all the services and resources not specified in aiven.tf! " ; ask

terraform init
terraform import aiven_project.xko-aiven-kafkapg "$aiven_project_name" 2>/dev/null || :
terraform apply $TFOPTIONS || TFERR=", there where errors."
echo
echo -n "...terraform done" ; echo $TFERR
if [ -n "$TFERR" ] ; then
  echo -n "Will retry one more time. " ; ask
  terraform apply $TFOPTIONS || echo "Still errors.. Please check terraform output above for clues"
fi
echo
echo ..init-aiven done

